{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hok/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js"],"names":["module","exports","withAuthRedirect","Component","RedirectComponent","this","props","isAuth","to","React","connect","state","auth","DialogItem","className","s","dialog","active","id","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","dialogsItem","values","sendMessage","compose","dispatch","sendMessageCreator"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oJCGnKC,EAAmB,SAACC,GAE7B,IAIMC,EANqC,uKAQnC,OAAIC,KAAKC,MAAMC,OAER,cAACJ,EAAD,eAAeE,KAAKC,QADhB,cAAC,IAAD,CAAUE,GAAI,eATU,GAMXC,IAAMN,WAUtC,OAFqCO,aAZJ,SAACC,GAAD,MAAY,CACzCJ,OAAQI,EAAMC,KAAKL,UAWcG,CAAoCN,K,2FCP9DS,EAPI,SAACP,GAChB,OACI,qBAAKQ,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAAST,GAAE,mBAAcF,EAAMY,IAA/B,SAAsCZ,EAAMa,UCEzCC,EANC,SAACd,GACb,OACI,qBAAKQ,UAAWC,IAAEM,QAAlB,SAA4Bf,EAAMe,W,wCCsCpCC,EAAcC,YAAiB,IAiB/BC,EAAsBC,YAAU,CAACC,KAAK,wBAAhBD,EAfL,SAACnB,GACpB,OACI,uBAAMqB,SAAUrB,EAAMsB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAC1CH,KAAM,iBACNe,YAAa,yBAExB,8BACI,kDAQDC,EApDC,SAAC7B,GACb,IAAIK,EAAQL,EAAM8B,YAEZC,EAAkB1B,EAAM2B,QACzBC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBD,GAAIsB,EAAEtB,IAAZsB,EAAEtB,OAGzCuB,EAAmB9B,EAAM+B,SAC1BH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,SAAcsB,EAAEzB,OAE3BP,EAAMiC,eAM7B,OAAKtC,EAAMC,OAKP,sBAAKO,UAAWC,IAAEuB,QAAlB,UACI,qBAAKxB,UAAWC,IAAE8B,YAAlB,SACKR,IAEL,sBAAKvB,UAAWC,IAAE2B,SAAlB,UACI,8BAAMD,IACN,cAACjB,EAAD,CAAqBG,SAfb,SAACmB,GACjBxC,EAAMyC,YAAYD,EAAOF,yBAIlB,cAAC,IAAD,CAAUpC,GAAI,Y,wBCFdwC,4BACXtC,aAlBkB,SAACC,GACnB,MAAO,CACHyB,YAAazB,EAAMyB,gBAIF,SAACa,GACtB,MAAO,CACHF,YAAa,SAACH,GACVK,EAASC,YAAmBN,SAUpC1C,IAFW8C,CAGbb","file":"static/js/4.a0d6854e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__o7Uz5\",\"dialogsItem\":\"Dialogs_dialogsItem__3Rldt\",\"active\":\"Dialogs_active__2O4a8\",\"messages\":\"Dialogs_messages__20l5D\",\"message\":\"Dialogs_message__2rvoV\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    let mapStateToPropsForRedirect = (state) => ({\r\n        isAuth: state.auth.isAuth,\r\n    });\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth)\r\n                return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\nexport default DialogItem;","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    const dialogsElements = state.dialogs\r\n        .map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>\r\n        );\r\n\r\n    const messagesElements = state.messages\r\n        .map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n    const newMessageBody = state.newMessageBody;\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    };\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to={'/login'}/>;\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} validate={[required, maxLength50]}\r\n                       name={\"newMessageBody\"}\r\n                       placeholder={\"Enter your message\"}></Field>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({form:\"dialogAddMessageForm\"})(AddMessageForm);\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    };\r\n};\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}